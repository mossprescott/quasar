@(schema: slamdata.engine.gen.DataSchema)

@import _root_.slamdata.engine.gen.DataSchema

package @schema.pkg

@for(n <- schema.imports) {import @n
}

sealed trait @(schema.decl)

object Types {@for(inst <- schema.instances) {
  final case class @(inst.name)@(schema.paramDecl)(@inst.paramArgs(schema.param)) extends @(schema.decl)}
}

@for(inst <- schema.instances) {
object @(inst.name) {
  def apply@(schema.paramDecl)(@inst.paramArgs(schema.param)): @(schema.decl) = Types.@(inst.name)(@inst.params.map(_._1).mkString(", "))
  def unapply@(schema.paramDecl)(obj: @(schema.decl)): @(inst.unapplyType(schema.param)) = obj match {
    case Types.@(inst.name)(@inst.params.map(_._1).mkString(", ")) => @inst.matchResult
    case _ => @inst.noMatchResult
  }
}
}
